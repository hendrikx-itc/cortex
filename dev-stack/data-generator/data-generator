#!/usr/bin/env python3
import os
import datetime
import time
import logging
import random
import argparse

import pysftp


def main():
    parser = argparse.ArgumentParser('Generate and SFTP upload data for testing')

    parser.add_argument(
        '--delete-some', action='store_true', default=False,
        help='Delete some files after uploading'
    )

    args = parser.parse_args()

    root_logger = logging.getLogger('')
    root_logger.setLevel(logging.INFO)

    storage_path = '.'

    interval = datetime.timedelta(seconds=30)
    next_run = datetime.datetime.now()

    with connect_sftp() as sftp:
        while True:
            now = datetime.datetime.now()

            if now > next_run:
                logging.info("Create directories")

                check_path(sftp, 'upload/blue/1')
                check_path(sftp, 'upload/blue/2')
                check_path(sftp, 'upload/red')

                logging.info("Data generation start")

                generate_data(sftp, storage_path, next_run)

                if args.delete_some:
                    generate_and_remove_data(sftp, storage_path, next_run)

                next_run += interval

                logging.info(f"Done, waiting for next run at {next_run}")

            time.sleep(10)


def connect_sftp():
    cnopts = pysftp.CnOpts()
    cnopts.hostkeys = None

    host = os.environ['SFTP_HOST']
    port = int(os.environ['SFTP_PORT'])
    username = os.environ['SFTP_USERNAME']
    password = os.environ['SFTP_PASSWORD']

    while True:
        try:
            conn = pysftp.Connection(host, port=port, username=username, password=password, cnopts=cnopts)

            return conn
        except Exception as exc:
            logging.warn('Could not connect to SFTP server: {}'.format(exc))
            time.sleep(2)


def send_file(sftp, storage_path, file_name, generate_lines):
    file_path = os.path.join(storage_path, file_name)

    generate_file(file_path, generate_lines)

    sftp.put(file_path, file_name)

    os.remove(file_path)


def mkdir_all(sftp, path):
    head, tail = os.path.split(path)

    if not sftp.isdir(head):
        mkdir_all(sftp, head)

    try:
        sftp.mkdir(path)
    except PermissionError as exc:
        raise Exception(f"Error creating remote directory '{path}': {exc}")


def check_path(sftp, path):
    if not sftp.isdir(path):
        mkdir_all(sftp, path)


def generate_data(sftp, storage_path, timestamp):
    with sftp.cd('upload/blue/1'):
        for i in range(100):
            file_name = f'test_blue_{i}_{timestamp:%Y%m%d:%H:%M:%S}.xml'

            send_file(sftp, storage_path, file_name, line_generator(1000, 30))

    with sftp.cd('upload/blue/2'):
        for i in range(1000):
            file_name = f'test_blue_{i}_{timestamp:%Y%m%d:%H:%M:%S}.xml'

            send_file(sftp, storage_path, file_name, line_generator(50, 8))


def generate_and_remove_data(sftp, storage_path, timestamp):
    with sftp.cd('upload/red'):
        generated_files = []

        for i in range(1000):
            file_name = f'test_red_{i}_{timestamp:%Y%m%d:%H:%M:%S}.xml'

            send_file(sftp, storage_path, file_name, line_generator(50, 8))
            generated_files.append(file_name)

        for file_name in generated_files:
            try:
                sftp.remove(file_name)
                logging.info("Removed {}".format(file_name))
            except IOError as e:
                pass


def generate_file(file_path, generate_lines):
    with open(file_path, 'w') as out_file:
        out_file.writelines(generate_lines())

    logging.info(f"Written {file_path}")


def line_generator(num_lines, num_columns):
    def generate_lines():
        yield ','.join(f'col_{i}' for i in range(num_columns)) + '\n'

        for i in range(num_lines):
            yield ','.join(str(random.random() * i) for i in range(num_columns)) + '\n'

    return generate_lines


if __name__ == '__main__':
    main()
